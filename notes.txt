The webpack scripts which we have added in package.json will run the webpack binary 
in different mode.

Why we having different mode for webpack?
For production, webpack will do different kind of optimization and for development
it will do different kind of optimization.


Webpack are extremely configurable. We can extend the functionalities
by adding more loaders, more plugins.


When we run build:prod script, it will generate main.js in
root dist folder by default.

By default, webpack take input from src/index.js 

Why we need webpack??
===
If we try to run to src/index/js file, it will throw an error as 
we are using es module syntax.


===
Webpack optimization
===

1. The benefit of using watch flag is whenever we make changes in our
   javascript files, we do not have to run the "bundle:prod" command again and again.

2. Whenever when a function is imported from another file and if we are using only once
    in that case, webpack will do optimization on its own (in production mode) and it will
    not include the body or the function defination of the function.


===
Dead code removal
===
It will automatically remove or exclude the unused code in main.js
i.e. it will only include program which we are using.
In this case, it will not include multiply, divide and substract function
in main.js (final bundle)

The advantage is the bundle size will be less.

As in client side in slow network, the bundle size is really matters.

E.g. If we are using lots of libraries and if we include everything and
in scenario where we are not using 100% of the libraries.
Then user will not have good experience as javascript will keep on loading 
and it will take lots of time to load the data.



======
Webpack Loaders 
=======
Webpack by default only works for js and json.

If we try to load any other files, webpack will throw and error 
and will ask for to use appropriate loaders.

=====
CSS Loader 
=====

To use css files in js file, we can use css loader which will handle
the files whose extensions is css.

npm i -D css-loader

====
webpack.config.js file is used to tweak around the behaviour of webpack.

In webpack.config.js, we need to export an object in commonjs style.
We are telling webpack, how to process css module.


Thus, we gave the webpack the intelligence its needed to understand 
how to load css files.


====
plugins
=====
Browser will need an HTML file to render something.

But webpack is generating a bundle for javascript till now.

Now we need an HTML file that consumes that bundle of javascript.

For that we can use a plugin called 'html-webpack-plugin'

npm i -D html-webpack-plugin 

html-webpack-plugin plugin is responsible for using every bundle output
generated by the webpack and generating an HTML file automatically 
which consumes everything that webpack has generated.

It is responsible for generating an html file which consumes everything
(javascript, css etc) which has generated by the webpack config.


====
Style Loader
====
In HTML file, we are having the css classes but it is not being used.


CSS Loader by default only tells webpack how to process the css files.
It doesn't tell webpack how to use or consume that.

For that we need a style loader, which takes the output 
of css loader and finally inject the css in html file.

use: ['style-loader','css-loader'] -> the output of css loader is passed to style-loader.
think of it as function where the output of last will go previous function.



====
Chaining plugin together in webpack 
====
Upto this configuration, we will the css classes as inline style when
we run and inspect in browser.
The reason for that is we are using style loader.

==
To not have this behaviour, we will use another plugin called :
mini-css-extract-plugin

npm i -D mini-css-extract-plugin


now instead of style loader, we will use MiniCssExtractPlugin.loader.
Now when we run the app, instead of inline style., it will use main.css file
to apply the css.

MiniCssExtractPlugin takes all the css and generate bundled optimized 
css which now can be used by html-webpack-plugin to load the css from a file and not a inline way.


====
Using Typescript
====


==
Fixing the Typescript
===
npm i -D ts-loader




